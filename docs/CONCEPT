
Abstract:
---------
This describes the several components of my little mmo project as well what they do and how they interact.

Components:
-----------
 * web-app: An erlang mochiweb application providing the JS userinterface and the REST Api to interact with the game
 * zone-app: An erlang server providing the backend for all the stuff
 * DB: A Couchdb storing the data for the app servers above.
 
 * couchdb-tools: Commandline tools for Import/Export of a CouchDB (nothing really game related)
 * Stomp-Smtp-Transport: Reads messages from a stomp queue and sends them out via smtp
 
web-app:
~~~~~~~~~~

The web-app provides the web interface for the enduser. Upon on authentication a session process is 
started for each user representing him in the zone. The JS based interface can perform API Call through
HTTP to get updates or perform actions.


zone-app:
~~~~~~~~~

Each session is connected to a zone which represents the area where the player can move around and
talk to other players.


Database:
~~~~~~~~~
The database is a REST database (CouchDB). For details about the structure see the next chapter.
Used for the persistence of the system data.

Toolchain:
~~~~~~~~~~
The toolchain provides a few commandline scripts for interacting with the database. 
Its main purpose is to import default values into the database and perform some kind of export
and search interface for debugging.

Databases:
----------

Accounts
~~~~~~~~
* loginname : string()
* loginpassword : string()
* email : string()
* openid : string()
* players : [string()]

Players
~~~~~~~
* name : string()
* description : string()
* location : [ zone : string(), x: int(), y: int()]

Zones
~~~~~~~
* name : string()
* fields : [ string() ]
* default_room : string()

Rooms
~~~~~
Each document describes a room and its default content. 

* name : string()
* description : string()
* size : [x : int(), y : int()]
* objects : [ [x : int(), y : int(), size : int(), type : string(), arguments : [] ] ],
* doors : [ [name : string(), next_room_id : string()] ]

Config
~~~~~~
Global configuration values. The document id works as the key.

* value : string()

Runtime Tables:
~~~~~~~~~~~~~~~
These databases are filled at runtime are not used for persistance. They provide a runtime information about the system, e.g. the number of connected clients, running components and so on.